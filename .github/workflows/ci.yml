name: CI

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '17 7 * * 1-5'  # run once per day Monday-Friday at 7:17am

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  ci-everything:
    name: All CI stages
    runs-on: ubuntu-latest
    needs:
      - lint
      - rust-tests
      - run-on-rust-libp2p
      - run-on-libp2p-dcutr-relay
      - run-on-libp2p-gossipsub-request-response
      - run-on-core-graphics
      - run-on-bevy-core
      - run-on-bevy-gltf
      - run-on-clap
    steps:
      - run: exit 0

  lint:
    name: Check lint and rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings --allow deprecated

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  rust-tests:
    name: Run tests
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        toolchain: ["1.65", "1.66", "stable", "beta"]
        experimental: [false]
        include:
          - toolchain: "nightly"
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true

      - name: Regenerate test data
        run: ./scripts/regenerate_test_rustdocs.sh +${{ matrix.toolchain }}

      - uses: Swatinem/rust-cache@v2

      - name: compile
        run: cargo test --no-run

      - name: test
        run: cargo test

  run-on-rust-libp2p:
    # Run cargo-semver-checks on a crate with no semver violations,
    # to make sure there are no false-positives.
    #
    # cargo-semver-checks previously reported a false-positive here,
    # since an enum variant in the crate was included by a feature:
    # https://github.com/obi1kenobi/cargo-semver-check/issues/147
    name: Run cargo-semver-checks on rust-libp2p 0.47.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout rust-libp2p
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'libp2p/rust-libp2p'
          ref: '3371d7ceab242440216ae9ab99829631fa418f3b'
          path: 'subject'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # rust-libp2p requires protobuf-compiler.
      - name: Install protobuf-compiler
        run: sudo apt install protobuf-compiler

      - uses: Swatinem/rust-cache@v2
        with:
          key: rust-libp2p

      - name: Run semver-checks
        run: cargo run semver-checks check-release --manifest-path="subject/core/Cargo.toml"

      # Test passing package name explicitly.
      # It was previously possible to make the command above work while the one here failed.
      # Reference: https://github.com/obi1kenobi/cargo-semver-checks/issues/174
      - name: Run semver-checks (alternative command)
        run: cargo run semver-checks check-release --manifest-path="subject/core/Cargo.toml" --package="libp2p-core"

  run-on-libp2p-dcutr-relay:
    # Run cargo-semver-checks on a crate with no semver violations,
    # to make sure there are no false-positives.
    #
    # cargo-semver-checks previously reported false-positives here
    # due to renaming re-exports causing confusion about which types match each other:
    # https://github.com/obi1kenobi/cargo-semver-checks/issues/202
    # https://github.com/libp2p/rust-libp2p/pull/2647#issuecomment-1340254920
    name: Run cargo-semver-checks on libp2p-dcutr 1.62.0 and libp2p-relay 0.14.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout rust-libp2p
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'libp2p/rust-libp2p'
          ref: 'be0b62a78fe9d72811b9eda742137cc8ddc4da35'
          path: 'subject'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # rust-libp2p requires protobuf-compiler.
      - name: Install protobuf-compiler
        run: sudo apt install protobuf-compiler

      - uses: Swatinem/rust-cache@v2
        with:
          key: libp2p-dcutr-relay

      - name: Run semver-checks on libp2p-dcutr
        run: cargo run semver-checks check-release --manifest-path="subject/protocols/dcutr/Cargo.toml"

      - name: Run semver-checks on libp2p-relay
        run: cargo run semver-checks check-release --manifest-path="subject/protocols/relay/Cargo.toml"

  run-on-libp2p-gossipsub-request-response:
    # Run cargo-semver-checks on two crates that used to trip an assert and cause a crash,
    # due to re-exports that omit generic parameters because the underlying generic type supplies
    # default values for those generics.
    # https://github.com/libp2p/rust-libp2p/pull/3401#issuecomment-1409381365
    name: Run cargo-semver-checks on libp2p-gossipsub 0.44.0 and libp2p-request-response 0.23.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout rust-libp2p
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'libp2p/rust-libp2p'
          ref: '8b8dc26e0601433f5675430b29b50687a37d4cd8'
          path: 'subject'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # rust-libp2p requires protobuf-compiler.
      - name: Install protobuf-compiler
        run: sudo apt install protobuf-compiler

      - uses: Swatinem/rust-cache@v2
        with:
          key: libp2p-gossipsub-request-response

      - name: Run semver-checks on libp2p-gossipsub
        run: cargo run semver-checks check-release --manifest-path="subject/protocols/gossipsub/Cargo.toml"

      - name: Run semver-checks on libp2p-request-response
        run: cargo run semver-checks check-release --manifest-path="subject/protocols/request-response/Cargo.toml"

  run-on-core-graphics:
    # Run cargo-semver-checks on a crate with no semver violations,
    # to make sure there are no false-positives.
    #
    # cargo-semver-checks previously reported a false-positive here,
    # due to multiple methods by the same name being defined on the same type.
    # https://github.com/obi1kenobi/cargo-semver-checks/issues/193
    name: Run cargo-semver-checks on core-graphics
    runs-on: macos-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout rust-libp2p
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'servo/core-foundation-rs'
          ref: '786895643140fa0ee4f913d7b4aeb0c4626b2085'
          path: 'subject'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2
        with:
          key: core-graphics

      - name: Run semver-checks
        run: cargo run semver-checks check-release --manifest-path="subject/core-graphics/Cargo.toml"

  run-on-bevy-core:
    # cargo-semver-checks previously crashed here due to
    # a bug in the generated Cargo.toml when generating a registry baseline:
    # https://github.com/obi1kenobi/cargo-semver-checks/issues/261
    name: Run cargo-semver-checks on bevy_core v0.9.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout bevy
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'bevyengine/bevy'
          ref: 'v0.9.0'
          path: 'subject'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2
        with:
          key: bevy-core

      - name: Run semver-checks
        run: cargo run semver-checks check-release --manifest-path="subject/crates/bevy_core/Cargo.toml"

  run-on-bevy-gltf:
    # cargo-semver-checks reported false-positives since it did not include
    # features defined implicitly via optional dependencies:
    # https://github.com/obi1kenobi/cargo-semver-checks/issues/265
    name: Run cargo-semver-checks on bevy_gltf v0.9.1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout bevy
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'bevyengine/bevy'
          ref: 'v0.9.1'
          path: 'subject'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2
        with:
          key: bevy-gltf

      - name: Run semver-checks
        run: cargo run semver-checks check-release --manifest-path="subject/crates/bevy_gltf/Cargo.toml" --baseline-version 0.9.0

  run-on-clap:
    # clap v3.2.0 added a semver violation
    # check whether cargo-semver-checks detects the issue
    # https://github.com/clap-rs/clap/issues/3876
    name: Run cargo-semver-checks on clap v3.2.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cargo-semver-checks
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Checkout clap v3.2.0
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'clap-rs/clap'
          ref: 'v3.2.0'
          path: 'subject-current'

      - name: Checkout clap v3.1.18
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          repository: 'clap-rs/clap'
          ref: 'v3.1.18'
          path: 'subject-baseline'

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2
        with:
          key: clap

      - name: Run semver-checks with --baseline-root
        continue-on-error: true
        run: |
          cargo run semver-checks check-release --manifest-path="subject-current/Cargo.toml" --baseline-root="subject-baseline/Cargo.toml" > output
          touch unexpectedly_did_not_fail

      - name: Check whether it failed
        run: |
          if [ -f unexpectedly_did_not_fail ]; then exit 1; else exit 0; fi

      - name: Check output
        run: |
          EXPECTED="$(echo -e "--- failure auto_trait_impl_removed: auto trait no longer implemented ---\n--- failure trait_missing: pub trait removed or renamed ---")"
          RESULT="$(cat output | grep failure)"
          diff <(echo "$RESULT") <(echo "$EXPECTED")

      - name: Cleanup
        run: |
          rm output
          rm -f unexpectedly_did_not_fail

      - name: Fetch v3.1.18 in subject-current
        run: |
          cd subject-current
          git fetch origin 524e36cf1a67ee6a447d3615a70b065d2b4f5e60
          cd ..

      - name: Run semver-checks with --baseline-rev
        continue-on-error: true
        run: |
          cargo run semver-checks check-release --manifest-path="subject-current/Cargo.toml" --baseline-rev=524e36cf1a67ee6a447d3615a70b065d2b4f5e60 > output
          touch unexpectedly_did_not_fail

      - name: Check whether it failed
        run: |
          if [ -f unexpectedly_did_not_fail ]; then exit 1; else exit 0; fi

      - name: Check output
        run: |
          EXPECTED="$(echo -e "--- failure auto_trait_impl_removed: auto trait no longer implemented ---\n--- failure trait_missing: pub trait removed or renamed ---")"
          RESULT="$(cat output | grep failure)"
          diff <(echo "$RESULT") <(echo "$EXPECTED")

  init-release:
    name: Run the release workflow
    needs:
      - should-publish
      - ci-everything
      - pre-publish-checks
    if: needs.should-publish.outputs.is_new_version == 'yes' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/release.yml
    with:
      publish-tag: ${{ needs.should-publish.outputs.publish-tag }}
    secrets:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  should-publish:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.check.outputs.is_new_version }}
      publish-tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2

      - id: check
        run: |
          set +e
          ./scripts/is_version_already_uploaded.sh cargo-semver-checks
          export EXIT_CODE="$?"
          set -e
          if [[ "$EXIT_CODE" == "7" ]]; then
            echo '::set-output name=is_new_version::no'
          elif [[ "$EXIT_CODE" == "0" ]]; then
            echo '::set-output name=is_new_version::yes'
          else
            # Unexpected outcome, indicates a bug.
            exit "$EXIT_CODE"
          fi
      - name: Determine the tag name
        id: tag
        run: |
          export TAG_NAME="v$(./scripts/get_current_version.sh cargo-semver-checks)"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

  pre-publish-checks:
    name: Check for semver compliance
    runs-on: ubuntu-latest
    needs:
      - ci-everything
      - should-publish
    if: needs.should-publish.outputs.is_new_version == 'yes'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v1
        with:
          # cargo-semver-checks currently doesn't have a --lib target,
          # so we explicitly ask for the binary target to be checked instead.
          # For library crates, you almost always want the default `--lib` value here.
          crate-target: --bin cargo-semver-checks
