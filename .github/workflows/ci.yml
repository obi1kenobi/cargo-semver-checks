name: CI

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '17 7 * * 1-5'  # run once per day Monday-Friday at 7:17am

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  ci-everything:
    name: All CI stages
    runs-on: ubuntu-latest
    needs:
      - lint
      - rust-tests
    steps:
      - run: exit 0

  lint:
    name: Check lint and rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings --allow deprecated

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  rust-tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install nightly rust to run rustdoc
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal

      - name: Regenerate test data
        run: ./scripts/regenerate_test_rustdocs.sh

      - name: Install stable rust for tests
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo test
        run: cargo test

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs:
      - should-publish
      - ci-everything
      - pre-publish-checks
    if: needs.should-publish.outputs.is_new_version == 'yes' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Tag the version
        run: |
          set -euxo pipefail
          export CURRENT_VERSION="$(./scripts/get_current_version.sh cargo-semver-checks)"
          git tag "v$CURRENT_VERSION"
          git push origin "v$CURRENT_VERSION"

      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish

  should-publish:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.check.outputs.is_new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: check
        run: |
          set +e
          ./scripts/is_version_already_uploaded.sh cargo-semver-checks
          export EXIT_CODE="$?"
          set -e
          if [[ "$EXIT_CODE" == "7" ]]; then
            echo '::set-output name=is_new_version::no'
          elif [[ "$EXIT_CODE" == "0" ]]; then
            echo '::set-output name=is_new_version::yes'
          else
            # Unexpected outcome, indicates a bug.
            exit "$EXIT_CODE"
          fi

  pre-publish-checks:
    name: Check for semver compliance
    runs-on: ubuntu-latest
    needs:
      - ci-everything
      - should-publish
    if: needs.should-publish.outputs.is_new_version == 'yes'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v1
        with:
          # cargo-semver-checks currently doesn't have a --lib target,
          # so we explicitly ask for the binary target to be checked instead.
          # For library crates, you almost always want the default `--lib` value here.
          crate-target: --bin cargo-semver-checks
