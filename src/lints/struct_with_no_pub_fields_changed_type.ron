SemverQuery(
    id: "struct_with_no_pub_fields_changed_type",
    human_readable_name: "public API struct with no public fields is no longer a struct",
    description: "A struct without pub fields was converted into an enum or union, breaking pattern matching.",
    required_update: Major,
    lint_level: Deny,
    reference_link: Some("https://internals.rust-lang.org/t/rest-patterns-foo-should-match-non-struct-types/21607"),
    reference: Some(
        r#"\
Even if a struct does not expose pub fields, pattern matching like `matches!(value, Example { .. })` is allowed outside \
the struct's own crate. Changing such a struct into an enum or union will break such pattern matching.

More info: https://github.com/obi1kenobi/cargo-semver-checks/issues/954
"#
    ),
    query: r#"
    {
        CrateDiff {
            baseline {
                item {
                    ... on Struct {
                        struct_typename: __typename @tag @output
                        visibility_limit @filter(op: "=", value: ["$public"]) @output
                        struct_type @output

                        # Ensure the struct does not have pub fields
                        # This prevents overlap with struct_with_pub_fields_changed_type
                        field @fold @transform(op: "count") @filter(op: "=", value: ["$zero"]) {
                            visibility_limit @filter(op: "=", value: ["$public"])
                            public_api_eligible @filter(op: "=", value: ["$true"])
                        }

                        # Ensure the struct does have non-pub fields
                        # This prevents overlap with constructible_struct_changed_type
                        field @fold @transform(op: "count") @filter(op: ">", value: ["$zero"])

                        importable_path {
                            path @output @tag
                            public_api @filter(op: "=", value: ["$true"])
                        }
                    }
                }
            }
            current {
                item {
                    ... on ImplOwner {
                        current_typename: __typename @filter(op: "!=", value: ["%struct_typename"])
                                                     @output
                        visibility_limit @filter(op: "=", value: ["$public"])
                        name @output

                        importable_path {
                            path @filter(op: "=", value: ["%path"])
                            public_api @filter(op: "=", value: ["$true"])
                        }

                        span_: span @optional {
                            filename @output
                            begin_line @output
                        }
                    }
                }
            }
        }
    }"#,
    arguments: {
        "public": "public",
        "true": true,
        "zero": 0,
    },
    error_message: "A struct without pub fields became an enum or union, breaking pattern matching.",
    per_result_error_template: Some("struct {{join \"::\" path}} became {{lowercase current_typename}} in file {{span_filename}}:{{span_begin_line}}"),
    witness: (
        hint_template: r#"matches!(value, {{join "::" path}} {..});"#,
    ),
)
